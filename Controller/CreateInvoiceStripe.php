<?php
/*
 * Copyright (c) 2021.
 * Desarrollado desde Goltratec S.L.
 * @author Francisco José García Alonso
 */

namespace FacturaScripts\Plugins\ImportadorStripe\Controller;

use FacturaScripts\Core\Base\Controller;
use FacturaScripts\Core\Lib\Email\NewMail;
use FacturaScripts\Core\Lib\Export\PDFExport;
use FacturaScripts\Core\Lib\ExtendedController\BaseController;
use FacturaScripts\Core\Lib\ExtendedController\BaseView;
use FacturaScripts\Core\Model\Cliente;
use FacturaScripts\Core\Model\EmailSent;
use FacturaScripts\Core\Model\FacturaCliente;
use FacturaScripts\Core\Model\FormaPago;
use FacturaScripts\Plugins\ImportadorStripe\Model\InvoiceStripe;
use FacturaScripts\Core\Lib\ExportManager;


class CreateInvoiceStripe extends Controller
{
    public $existClient = false;
    public $clientFs;
    private $fs_idFsCustomer = '';
    public $sk_stripe_index = null;
    public $action = '';
    public $error = false;
    public $payment_methods = [];

    public function getPageData()
    {
        $pageData = parent::getPageData();
        $pageData['title'] = 'Crear nueva factura desde stripe';
        $pageData['menu'] = 'Stripe';
        $pageData['icon'] = 'fas fa-search';
        $pageData['showonmenu'] = false;
        return $pageData;
    }

    public function privateCore(&$response, $user, $permissions)
    {
        parent::privateCore($response, $user, $permissions); // TODO: Change the autogenerated stub
        $this->init();
    }


    private function init()
    {
        session_start();
        $this->action = $this->request->query->get('action');
        $this->sk_stripe_index = $this->request->query->get('sk_stripe_index') !== null ? $this->request->query->get('sk_stripe_index') : $_SESSION['sk_stripe_index'];
        $this->paymentMethods();

        /* if ($this->>action === null) {
            $this->toolbox()->log()->error('No se ha definido la acción');
            return false;
        } */
        if ($this->sk_stripe_index === null) {
            $this->toolbox()->log()->error('No se ha definido el sk');
            return false;
        }

        switch ($this->action) {
            case 'check':
                $id = $this->request->query->get('id');

                $_SESSION['id_stripe_invoice'] = $id;
                $_SESSION['sk_stripe_index'] = $this->sk_stripe_index;


                if ($id !== null) {
                    $this->processInvoice($id, $this->sk_stripe_index);
                }
                break;
            case 'createInvoice':
                $mark_as_paid = $this->request->request->get('ck_paid') !== null && $this->request->request->get('ck_paid') !== "false";
                $payment_method = ($this->request->request->get('ck_paid') !== null && $this->request->request->get('ck_paid') !== "false" && $this->request->request->get('payment_method') !== null) ? $this->request->request->get('payment_method') : null;
                $send_by_email = $this->request->request->get('send_email') !== null && $this->request->request->get('send_email') !== "false";

                $code = $this->generateFSInvoice($_SESSION['id_stripe_invoice'], $this->sk_stripe_index, $mark_as_paid, $payment_method, $send_by_email);
                if ($code !== null && $send_by_email===true)
                    $this->exportAndSendEmail($code);

                break;
            case 'clientOk':
                $this->customer_id = $this->request->query->get('codcliente');
                if ($this->customer_id !== null) {
                    //recibimos el cliente creado / seleccionado, modificamos el cliente, processInvoice
                    $this->setClientToStripeClient();
                } else
                    $this->toolbox()->log()->error('No se pudo ejecutar la acción ');
                break;
        }
    }

    private function loadInvoice($id, $sk_stripe_index)
    {
        $invoice = InvoiceStripe::loadInvoiceFromStripe($id, $sk_stripe_index);
        return $invoice;
    }

    /**
     * Carga las formas de pago para mostrarlas en un select de la vista
     */
    private function paymentMethods()
    {
        $_pm = new FormaPago();
        $pm = $_pm->all();

        foreach ($pm as $p) {
            $this->payment_methods[$p->codpago] = $p->descripcion;
        }
    }

    /**
     * Carga la factura de stripe para comprobar si el cliente está asociado a un cliente de FS y guarda en una sesión el id
     * del cliente de stripe de modo que podmaos usarlo para vincularlo con el cliente de FS en caso que no lo esté.
     * Si no está vinculado la vista muestra la opción de vincularlo a un cliente existente o crear uno nuevo en FS.
     * Tambien carga en la variable clienteFs los datos del cliente de Fs cuando está vinculado para mostrarlo en la vista.
     * @param $id
     * @param $sk_stripe_index
     */
    private function processInvoice($id, $sk_stripe_index)
    {

        $invoice = $this->loadInvoice($id, $sk_stripe_index); //InvoiceStripe::loadInvoiceFromStripe($id, $sk_stripe_index);
        $stripe_customer_id = $invoice['data'][0]->customer_id;
        $_SESSION['stripe_customer_id'] = $stripe_customer_id;

        if (isset($invoice['data'][0]->fs_idFsCustomer) && strlen($invoice['data'][0]->fs_idFsCustomer) > 0) {
            //como está vinculado, cargo el cliente de fs para mostrarlo en la vista y dar la opción de crear la factura.
            $this->existClient = true;
            $this->clientFs = new Cliente();
            $this->clientFs->loadFromCode($invoice['data'][0]->fs_idFsCustomer);
        }
    }

    /**
     * Vincula el cliente de stripe con el cliente de FS.
     */
    private function setClientToStripeClient()
    {
        $res = InvoiceStripe::setFsIdCustomer($_SESSION['stripe_customer_id'], $_SESSION['sk_stripe_index'], $this->customer_id);
        if ($res['status'] === true) {
            $this->processInvoice($_SESSION['id_stripe_invoice'], $_SESSION['sk_stripe_index']);
            $this->toolBox()->log()->info('Cliente vinculador correctamente.');
        } else {
            $this->toolBox()->log()->error($res['message']);
        }
    }

    /**
     * Crea la factura en Fs, la vincula con la de Stripe.
     * Devuelve false en caso de fallar. Si todo va bien devuelve el código de la factura creada.
     * @param $id_invoice_stripe
     * @param $sk_stripe_index
     * @return void | integer
     */
    private function generateFSInvoice($id_invoice_stripe, $sk_stripe_index, $mark_as_paid, $payment_method, $send_by_email)
    {
        try {
            $res = InvoiceStripe::generateFSInvoice($id_invoice_stripe, $sk_stripe_index, $mark_as_paid, $payment_method, $send_by_email);
            $this->error = !$res['status'];
            return $res['code'];
        } catch (\Exception $ex) {
            $this->error = true;
            $this->toolbox()->log()->error($ex->getMessage());
        }

    }

    private function exportAndSendEmail($code)
    {
        $factura = new FacturaCliente();
        $factura->loadFromCode($code);
        $cliente = new Cliente();
        $cliente->loadFromCode($factura->codcliente);
        if ($cliente->email === null || strlen($cliente->email) == 0 && !filter_var($cliente->email, FILTER_VALIDATE_EMAIL)) {
            $this->toolbox()->log()->error('Se generará la factura pero no se puede enviar el email porque el cliente no tiene puesta una dirección.');
        } else {
            $pdf = new PDFExport();
            $pdf->addBusinessDocPage($factura);
            $path = FS_FOLDER . DIRECTORY_SEPARATOR . 'MyFiles' . DIRECTORY_SEPARATOR;
            $fileName = 'factura_' . $factura->codigo . '.pdf';
            // TODO: Borrar fichero una vez enviado
            if (file_put_contents($path . $fileName, $pdf->getDoc())) {
                $mail = new NewMail();

                if(FS_DEBUG)
                    $mail->addAddress('francisco@goltratec.com');
                else
                    $mail->addAddress($cliente->email);

                $mail->title = 'Le enviamos su factura ' . $factura->codigo;
                $mail->text = 'Estimado cliente, le enviamos la factura correspondiente al servicio. Gracias por confiar en nosotros';
                $mail->addAttachment($path . $fileName, $fileName);
                $mail->fromNick = $this->user->nick;
                if ($mail->send()) {
                    $factura->femail = date('Y-m-d');
                    $factura->save();
                    $this->toolbox()->log()->info('Correo enviado correctamente');
                   /* $emailSent = new EmailSent();
                    $emailSent->addressee=$mail->getToAddresses()[0];
                    $emailSent->subject = $mail->title;
                    $emailSent->body =$mail->text;
                    $emailSent->date = date('Y-m-d H:i:s');
                    $emailSent->nick = $this->user->nick;
                    $emailSent->verificode=$mail->verificode;
                    if(!$emailSent->save()){
                        $this->toolbox()->log()->info('Hubo algún error al guardar el correo en la ficha del cliente');
                    }*/

                } else {
                    $this->toolbox()->log()->info('Hubo algún error al enviar el correo');
                }
                unlink($path . $fileName);
            } else {
                $this->toolbox()->log()->error('Se generará la factura pero no se puede enviar el email porque hubo algún error al generar el fichero.');
            }
        }
    }
}
